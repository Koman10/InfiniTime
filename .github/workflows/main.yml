name: Build firmware (Guardian Beacon)

on:
  workflow_dispatch: {}
  push:
    branches: [ main, guardian-beacon ]
    paths-ignore:
      - ".github/workflows/docker.yml"
      - "README.md"

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      SDK_ZIP_URL: https://developer.nordicsemi.com/nRF5_SDK/nRF5_SDK_v15.x.x/nRF5_SDK_15.3.0_59ac345.zip
      SDK_DIR: ${{ github.workspace }}/_nrf5sdk
      TOOLCHAIN_DIR: /usr

    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Mark repo as safe
        run: git config --global --add safe.directory "${{ github.workspace }}"

      - name: Install build tools + ARM newlib
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            cmake ninja-build build-essential python3 python3-pip \
            gcc-arm-none-eabi binutils-arm-none-eabi \
            libnewlib-arm-none-eabi libstdc++-arm-none-eabi-newlib \
            nodejs npm
          sudo npm install -g lv_font_conv
          arm-none-eabi-gcc --version

      - name: Ensure newlib headers are visible at /usr/arm-none-eabi/include
        run: |
          if [ -d /usr/lib/arm-none-eabi/include ] && [ ! -d /usr/arm-none-eabi/include ]; then
            sudo mkdir -p /usr/arm-none-eabi
            sudo ln -s /usr/lib/arm-none-eabi/include /usr/arm-none-eabi/include
          fi
          echo "Check includes:"
          ls -la /usr/arm-none-eabi/include | head || true
          ls -la /usr/lib/arm-none-eabi/include | head || true

      - name: Download nRF5 SDK 15.3.0
        run: |
          mkdir -p "$SDK_DIR"
          curl -L "$SDK_ZIP_URL" -o /tmp/nrf5sdk.zip
          unzip -q /tmp/nrf5sdk.zip -d "$SDK_DIR"
          ls -la "$SDK_DIR"

      - name: Configure (CMake)
        run: |
          # Dajemy oba katalogi include wprost, żeby uniknąć niespodzianek
          EXTRA_INC="-isystem /usr/arm-none-eabi/include -isystem /usr/lib/arm-none-eabi/include"
          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DNRF5_SDK_PATH="${SDK_DIR}/nRF5_SDK_15.3.0_59ac345" \
            -DARM_NONE_EABI_TOOLCHAIN_PATH="${TOOLCHAIN_DIR}" \
            -DCMAKE_C_COMPILER="${TOOLCHAIN_DIR}/bin/arm-none-eabi-gcc" \
            -DCMAKE_CXX_COMPILER="${TOOLCHAIN_DIR}/bin/arm-none-eabi-g++" \
            -DCMAKE_C_FLAGS="${EXTRA_INC}" \
            -DCMAKE_CXX_FLAGS="${EXTRA_INC}" \
            -DCMAKE_TRY_COMPILE_TARGET_TYPE=STATIC_LIBRARY \
            -DBUILD_DFU=1 -DBUILD_RESOURCES=1

      - name: Build
        run: cmake --build build -j"$(nproc)"

      - name: Show build outputs
        run: |
          ls -lh build || true
          ls -lh build/*.bin build/*.hex build/*.zip 2>/dev/null || true

      - name: Upload firmware artifacts
        uses: actions/upload-artifact@v4
        with:
          name: guardian-firmware
          path: |
            build/*.bin
            build/*.hex
            build/*.zip
            build/*.out
          if-no-files-found: warn
